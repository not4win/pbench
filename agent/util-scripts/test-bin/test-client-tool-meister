#!/bin/bash

_script_path="$(dirname ${0})"
pbench_bin="$(realpath -e ${_script_path}/..)"

# source the base script
. "${pbench_bin}"/base

if [[ -z "${full_hostname}" ]]; then
    printf -- "Missing 'full_hostname' environment variable" >&2
    exit 1
fi
export full_hostname

if [[ -z "${hostname}" ]]; then
    printf -- "Missing 'hostname' environment variable" >&2
    exit 1
fi
export hostname

if [[ -z "${1}" ]]; then
     group="default"
else
     group="${1}"
fi

function register {
<<<<<<< HEAD
<<<<<<< HEAD
    if [[ -z "${2}" ]]; then
        local remote_arg=""
    else
        local remote_arg=" --remote ${2}"
    fi
    pbench-register-tool --group "${group}" --name ${1}${remote_arg}
    status=${?}
    if [[ ${status} -ne 0 ]]; then
        printf -- "ERROR - \"pbench-register-tool --group %s --name %s\" failed to execute successfully (exit code: %s)\n" "${group}" "${1}${remote_arg}" "${status}" >&2
=======
    if [[ -z "${1}" ]]; then
=======
    if [[ -z "${2}" ]]; then
>>>>>>> Apply changes based on today's code-review
        local remote_arg=""
    else
        local remote_arg=" --remote ${2}"
    fi
    pbench-register-tool --group "${group}" --name ${1}${remote_arg}
    status=${?}
    if [[ ${status} -ne 0 ]]; then
<<<<<<< HEAD
        printf -- "\"pbench-register-tool --group ${group} --name mpstat${remote_arg}\" failed to execute successfully (exit code: ${status})\n"
>>>>>>> First pass implementation of the "Tool Meister"
=======
        printf -- "\"pbench-register-tool --group ${group} --name ${1}${remote_arg}\" failed to execute successfully (exit code: ${status})\n"
>>>>>>> Apply changes based on today's code-review
        exit 1
    fi
}

# Always register a local tool
<<<<<<< HEAD
<<<<<<< HEAD
register mpstat
register iostat

if [[ "${2}" == "with-remotes" ]]; then
    register mpstat remote_a.example.com
    register mpstat remote_b.example.com
    register mpstat remote_c.example.com
=======
register

if [[ "${2}" == "with-remotes" ]]; then
    register remote_a.example.com
    register remote_b.example.com
    register remote_c.example.com
>>>>>>> First pass implementation of the "Tool Meister"
=======
register mpstat
register iostat

if [[ "${2}" == "with-remotes" ]]; then
    register mpstat remote_a.example.com
    register mpstat remote_b.example.com
    register mpstat remote_c.example.com
>>>>>>> Apply changes based on today's code-review
fi

# We created the benchmark_run_dir directory as the tool meister expects it to
# exist.
mkdir ${benchmark_run_dir}
status=${?}
if [[ ${status} -ne 0 ]]; then
<<<<<<< HEAD
    printf -- "ERROR - \"mkdir %s\" failed to execute successfully (exit code: %s)\n" "${benchmark_run_dir}" "${status}" >&2
    exit 1
fi

function _timeout {
    timeout --kill-after=30 --signal TERM 60 $*
}

_timeout pbench-tool-meister-start ${group}
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-tool-meister-start %s\" failed to execute successfully (exit code: %s)\n" "${group}" "${status}" >&2
=======
    printf -- "\"mkdir ${benchmark_run_dir}\" failed to execute successfully (exit code: ${status})\n"
    exit 1
fi

pbench-tool-meister-start ${group}
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "\"pbench-tool-meister-start ${group}\" failed to execute successfully (exit code: ${status})\n"
>>>>>>> First pass implementation of the "Tool Meister"
    exit 1
fi

sample="sample42"
iteration="0-iter-zero"

benchmark_results_dir="${benchmark_run_dir}/${iteration}/${sample}"
tools_dir="${benchmark_results_dir}/tools-${group}"
mkdir -p ${tools_dir}
status=${?}
if [[ ${status} -ne 0 ]]; then
<<<<<<< HEAD
    printf -- "ERROR - failed to create tool directory, '%s' (exit code: %s)\n" "${tools_dir}" "${status}" >&2
    exit 1
fi
_timeout pbench-start-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-start-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi
_timeout pbench-stop-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-stop-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi
_timeout pbench-postprocess-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-postprocess-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi
=======
    printf -- "ERROR - failed to create tool directory, '%s' (exit code: %s)\n" "${tools_dir}" "${status}"
    exit 1
fi
pbench-start-tools --group="${group}" --dir="${tools_dir}"
pbench-stop-tools --group="${group}" --dir="${tools_dir}"
pbench-postprocess-tools --group="${group}" --dir="${tools_dir}"
>>>>>>> First pass implementation of the "Tool Meister"

iteration="1-iter-one"

benchmark_results_dir="${benchmark_run_dir}/${iteration}/${sample}"
tools_dir="${benchmark_results_dir}/tools-${group}"
mkdir -p ${tools_dir}
status=${?}
if [[ ${status} -ne 0 ]]; then
<<<<<<< HEAD
    printf -- "ERROR - failed to create tool directory, '%s' (exit code: %s)\n" "${tools_dir}" "${status}" >&2
    exit 1
fi
_timeout pbench-start-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-start-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi
_timeout pbench-stop-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-stop-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi
_timeout pbench-postprocess-tools --group="${group}" --dir="${tools_dir}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-postprocess-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
    exit 1
fi

_timeout pbench-tool-meister-stop
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-tool-meister-stop\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
=======
    printf -- "ERROR - failed to create tool directory, '%s' (exit code: %s)\n" "${tools_dir}" "${status}"
    exit 1
fi
pbench-start-tools --group="${group}" --dir="${tools_dir}"
pbench-stop-tools --group="${group}" --dir="${tools_dir}"
pbench-postprocess-tools --group="${group}" --dir="${tools_dir}"

pbench-tool-meister-stop
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "\"pbench-tool-meister-stop\" failed to execute successfully (exit code: ${status})\n"
>>>>>>> First pass implementation of the "Tool Meister"
    exit 1
fi
